###############################################
# Modify all parameters related to jogging here
###############################################
use_gazebo: false # Whether the robot is started in a Gazebo simulation environment

## Properties of incoming commands
ee_frame_name: r_temoto_end_effector
robot_link_command_frame:  r_temoto_end_effector  # TF frame that incoming cmds are given in
command_in_type: "speed_units" # "unitless"> in the range [-1:1], as if from joystick. "speed_units"> cmds are in m/s and rad/s
scale: # Only used if command_in_type=="unitless"
  linear:  0.6  # Max linear velocity. Meters per publish_period. Units is [m/s]
  rotational:  0.3 # Max angular velocity. Rads per publish_period. Units is [rad/s]
  joint: 0.3  # Max joint angular/linear velocity. Rads or Meters per publish period. Units is [rad/s] or [m/s].
low_pass_filter_coeff: 4.  # Larger --> trust the filtered data more, trust the measurements less.

## Properties of outgoing commands
publish_period: 0.008  # 1/Nominal publish rate [seconds]
low_latency_mode: true  # Set this to true to publish as soon as an incoming Twist command is received (publish_period is ignored)

# What type of topic does your robot driver expect?
# Currently supported are std_msgs/Float64MultiArray (for ros_control JointGroupVelocityController or JointGroupPositionController)
# or trajectory_msgs/JointTrajectory (for Universal Robots and other non-ros_control robots)
command_out_type: std_msgs/Float64MultiArray

# What to publish? Can save some bandwidth as most robots only require positions or velocities
publish_joint_positions: false
publish_joint_velocities: true
publish_joint_accelerations: false

## MoveIt properties
move_group_name:  right_ur5  # Often 'manipulator' or 'arm'
planning_frame: base_link  # The MoveIt! planning frame. Often 'base_link'

## Stopping behaviour
incoming_command_timeout:  0.2  # Stop jogging if X seconds elapse without a new cmd
# If 0, republish commands forever even if the robot is stationary. Otherwise, specify num. to publish.
# Important because ROS may drop some messages and we need the robot to halt reliably.
num_outgoing_halt_msgs_to_publish: 4

## Configure handling of singularities and joint limits
lower_singularity_threshold:  17  # Start decelerating when the condition number hits this (close to singularity)
hard_stop_singularity_threshold: 30 # Stop when the condition number hits this
joint_limit_margin: 0.1 # added as a buffer to joint limits [radians]. If moving quickly, make this larger.

## Topic names
cartesian_command_in_topic: delta_jog_cmds  # Topic for incoming Cartesian twist commands
joint_command_in_topic: joint_delta_jog_cmds # Topic for incoming joint angle commands
joint_topic:  joint_states
status_topic: status
command_out_topic: /right_ur5/compliance_controller/velocity_command # Publish outgoing commands here

## Collision checking
check_collisions: true # Check collisions?
collision_check_rate: 2.5 # [Hz] Collision-checking can easily bog down a CPU if done too often.
collision_check_type: threshold_distance
self_collision_proximity_threshold: 0.004 # Start decelerating when a self-collision is this far [m]
scene_collision_proximity_threshold: 0.05 # Start decelerating when a scene collision is this far [m]
# Parameters for "stop_distance"-type collision checking
collision_distance_safety_factor: 1000 # Must be >= 1. A large safety factor is recommended to account for latency
min_allowable_collision_distance: 0.005 # Stop if a collision is closer than this [m]
